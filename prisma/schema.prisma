// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "cockroachdb"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id                 String   @id @default(uuid())
    sessionToken       String   @unique
    userId             String
    expires            DateTime
    user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole{
  admin
  user
}

model User{
  id                String    @id @default(cuid())
  name              String?
  email             String      @unique
  image             String?
  hashedPassword    String?
  role              UserRole    @default(user)
  emailVerified     DateTime?
  hasNotify         Boolean     @default(false)
  payment           Payment[]
  rattings          Rattings[]
  accounts          Account[]
  session           Session[]
  notify            Notify[]
  product           Products[]
  cart              Cart[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())

  @@index([id,email])
}



model Products{
  id                String    @id @default(cuid())
  name              String
  path              String      @unique
  desc              String      @db.String
  imageUrl          String[]
  price             Int
  discount          Float?
  subcategory       String
  stock             Int
  selling           Int         @default(0)
  size              String[]
  category          String
  color             String[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())
  userId            String      
  store             User @relation(fields: [userId],references: [id],onDelete: Cascade)
  rattings          Rattings[]
  cart              Cart[]

  @@index([id,userId,path])
}

model Cart{
  id                String    @id @default(cuid())
  productId         String
  products          Products    @relation(fields: [productId],references: [id],onDelete: Cascade)
  userId            String      
  user              User @relation(fields: [userId],references: [id],onDelete: Cascade)
  @@index([userId,id])
}

model DataPayment{
  id                String    @id @default(cuid())
  name              String
  totalPrice        Float
  totalProduct      Int
  imageUrl          String[]
  status            String      @default("pending")
  color             String?
  size              String?
  productId         String
  paymentId         String
  cartId            String?
  payment           Payment   @relation(fields: [paymentId],references: [id],onDelete: Cascade)

  @@index([id])
}

model Payment {
  id                String    @id @default(cuid())
  dataPayment       DataPayment[]
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @default(now())
  userId            String      
  user              User @relation(fields: [userId],references: [id],onDelete: Cascade)
  
  @@index([id,userId])
}

model Rattings {
  id                String    @id @default(cuid())
  value             Int
  comment           String?     @db.String
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @default(now())
  userId            String      
  user              User        @relation(fields: [userId],references: [id],onDelete: Cascade)
  productId         String      
  products          Products    @relation(fields: [productId],references: [id],onDelete: Cascade)

  @@index([userId,productId])
}

model Notify {
  id                String       @id @default(cuid())
  comment           String       @db.String
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @default(now())
  paymentId         String
  reads             Boolean      @default(false)      
  userId            String?      
  user              User?        @relation(fields: [userId],references: [id],onDelete: Cascade)      

  @@index([id,userId])
}

model Banner {
  id                String    @id @default(cuid())
  imageUrl          String
  pathname          String?
}

model VerificationToken {
    identifier      String
    token           String   @unique
    expires         DateTime

    @@unique([identifier, token])
}
