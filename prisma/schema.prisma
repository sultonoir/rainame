// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "cockroachdb"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(uuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole{
  admin
  user
}

model User{
  id                String    @id @default(cuid())
  name              String?
  email             String      @unique
  image             String?
  hashedPassword    String?
  role              UserRole    @default(user)
  emailVerified     DateTime?
  payment           Payment[]
  rattings          Rattings[]
  accounts          Account[]
  session           Session[]
  notify            Notify[]
  product           Products[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())
}


model Products{
  id                String    @id @default(cuid())
  name              String
  path              String      @unique
  desc              String      @db.String
  imageUrl          String[]
  price             Int
  discount          Int?
  subcategory       String
  stock             Int
  selling           Int?
  size              String[]
  category          String
  color             String[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())
  userId            String      
  store             User @relation(fields: [userId],references: [id],onDelete: Cascade)
  payment           Payment[]
  rattings          Rattings[]
}


model Payment {
  id                String    @id @default(cuid())
  totalPrice        Int
  totalProduct      Int
  color             String?
  size              String?
  status            String      @default("pending")
  name              String
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @default(now())
  userId            String      
  user              User @relation(fields: [userId],references: [id],onDelete: Cascade)
  productId         String    
  products          Products  @relation(fields: [productId],references: [id],onDelete: Cascade)
  rattings          Rattings[]
}

model Rattings {
  id            String    @id @default(cuid())
  value             Int
  comment           String?     @db.String
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @default(now())
  paymentId         String      
  Payment           Payment     @relation(fields: [paymentId],references: [id])
  userId            String      
  user              User        @relation(fields: [userId],references: [id],onDelete: Cascade)
  productId         String      
  products          Products    @relation(fields: [productId],references: [id],onDelete: Cascade)
}

model Notify {
  id            String    @id @default(cuid())
  value             Int
  comment           String?     @db.String
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @default(now())
  paymentId         String
  reads             Boolean     @default(false)      
  userId            String      
  user              User        @relation(fields: [userId],references: [id],onDelete: Cascade)
  productId         String      
}

model Banner {
  id            String    @id @default(cuid())
  imageUrl          String
  thumbnail         String
  pathname          String
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
